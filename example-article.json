This file specifies what posts look like:

# This is not proper JSON, set editor to Spaces - 4 when editing this

# The following are ways URIs that can be used for post retrieval
#
# http://service/author/posts (posts that are visible to the currently authenticated user)
# or
# http://service/posts (all posts marked as public on the server)
# or
# http://service/author/{AUTHOR_ID}/posts (all posts made by {AUTHOR_ID} visible to the currently authenticated user)
# or
# http://service/posts/{POST_ID} access to a single post with id = {POST_ID}
# or
# http://service/posts/{post_id}/comments access to the comments in a post
#
# All of the previous URIs will get a list of posts like this:
# If a page is provided, return the results for that page, if no page is provided return page 0
# If a size is provided, return pages in this size up to the maximum set on the server. If no size is provided
# return the default page size
# Use same pagination style for all endpoints in this file
# Example:
# GET http://service/author/posts?page=4&size=50
# GET http://service/author/posts?page=4
{
	"query": "posts",
	# GET to http://service/posts
	# number of posts
	"count": 1023,
	# Page size
	"size": 50,
	# Do not return next if last page
	"next": "http://service/author/posts?page=5",
	# Do not return previous if page is 0.
	"previous": "http://service/author/posts?page=3",
	# should be sorted newest(first) to oldest(last) 
	"posts":[
		{
			# title of a post
			"title":"A post title about a post about web dev",
			# where did you get this post from?
			"source":"http://lastplaceigotthisfrom.com/post/yyyyy",
			# where is it actually from
			"origin":"http://whereitcamefrom.com/post/zzzzz",
			# a brief description of the post
			"description":"This post discusses stuff -- brief",
			# The content type of the post
			# assume either
			# text/x-markdown
			# text/plain
			# for HTML you will want to strip tags before displaying
			"contentType":"text/plain",
			"content":"Þā wæs on burgum Bēowulf Scyldinga, lēof lēod-cyning, longe þrāge folcum gefrǣge (fæder ellor hwearf, aldor of earde), oð þæt him eft onwōc hēah Healfdene; hēold þenden lifde, gamol and gūð-rēow, glæde Scyldingas. Þǣm fēower bearn forð-gerīmed in worold wōcun, weoroda rǣswan, Heorogār and Hrōðgār and Hālga til; hȳrde ic, þat Elan cwēn Ongenþēowes wæs Heaðoscilfinges heals-gebedde. Þā wæs Hrōðgāre here-spēd gyfen, wīges weorð-mynd, þæt him his wine-māgas georne hȳrdon, oð þæt sēo geogoð gewēox, mago-driht micel. Him on mōd bearn, þæt heal-reced hātan wolde, medo-ærn micel men gewyrcean, þone yldo bearn ǣfre gefrūnon, and þǣr on innan eall gedǣlan geongum and ealdum, swylc him god sealde, būton folc-scare and feorum gumena. Þā ic wīde gefrægn weorc gebannan manigre mǣgðe geond þisne middan-geard, folc-stede frætwan. Him on fyrste gelomp ǣdre mid yldum, þæt hit wearð eal gearo, heal-ærna mǣst; scōp him Heort naman, sē þe his wordes geweald wīde hæfde. Hē bēot ne ālēh, bēagas dǣlde, sinc æt symle. Sele hlīfade hēah and horn-gēap: heaðo-wylma bād, lāðan līges; ne wæs hit lenge þā gēn þæt se ecg-hete āðum-swerian 85 æfter wæl-nīðe wæcnan scolde. Þā se ellen-gǣst earfoðlīce þrāge geþolode, sē þe in þȳstrum bād, þæt hē dōgora gehwām drēam gehȳrde hlūdne in healle; þǣr wæs hearpan swēg, swutol sang scopes. Sægde sē þe cūðe frum-sceaft fīra feorran reccan",
			# the author has an ID where by authors can be disambiguated 
			"author":{
				# ID of the Author (UUID) http://en.wikipedia.org/wiki/Universally_unique_identifier
				"id":"de305d54-75b4-431b-adb2-eb6b9e546013",
				# the home host of the author
				"host":"http://127.0.0.1:5454/",
				# the display name of the author
				"displayName":"Lara Croft",
				# url to the authors information
				"url":"http://127.0.0.1:5454/author/9de17f29c12e8f97bcbbd34cc908f1baba40658e",
				# HATEOS url for Github API
				"github": "http://github.com/laracroft"
			},
			# categories this post fits into (a list of strings
			"categories":["web","tutorial"],
			# comments about the post
			# return a maximum number of comments
			# total number of comments for this post
			"count": 1023,
			# page size
			"size": 50,
			# the first page of comments
			"next": "http://service/posts/{post_id}/comments",
			# You should return ~ 5 comments per post.
			# should be sorted newest(first) to oldest(last) 
			"comments":[
				{
					"author":{
					    # ID of the Author (UUID)
						"id":"de305d54-75b4-431b-adb2-eb6b9e546013",
						"host":"http://127.0.0.1:5454/",
						"displayName":"Greg Johnson",
						# url to the authors information
						"url":"http://127.0.0.1:5454/author/9de17f29c12e8f97bcbbd34cc908f1baba40658e",
						# HATEOS url for Github API
						"github": "http://github.com/gjohnson"
					},
					"comment":"Sick Olde English",
					"contentType":"text/x-markdown",
					# ISO 8601 TIMESTAMP
					"published":"2015-03-09T13:07:04+00:00",
					# ID of the Comment (UUID)
					"id":"de305d54-75b4-431b-adb2-eb6b9e546013"
				}
			]
			# ISO 8601 TIMESTAMP
			"published":"2015-03-09T13:07:04+00:00",
			# ID of the Post (UUID)
			"id":"de305d54-75b4-431b-adb2-eb6b9e546013",
			# visibility ["PUBLIC","FOAF","FRIENDS","PRIVATE","SERVERONLY"]
			"visibility":"PUBLIC"
			# for visibility PUBLIC means it is open to the wild web
			# FOAF means it is only visible to Friends of A Friend
			# If any of my friends are your friends I can see the post
			# FRIENDS means if we're direct friends I can see the post
			# PRIVATE means only you can see the post
			# SERVERONLY means only those on your server (your home server) can see the post                                              
		}
	]
}


# Example 
# http://service/posts/{post_id}/comments access to the comments in a post
# http://service/posts/{post_id}/comments?page=4
# http://service/posts/{post_id}/comments?page=4&size=40
{
	"query": "comments",
        # comments about the post
        # return a maximum number of comments
        # A list of posts
    	"count": 1023,
    	"size": 50,
    	# Do not return next if last page
        "next": "http://service/posts/{post_id}/comments?page=5",
    	# Do not return previous if page is 0.
    	"previous": "http://service/posts/{post_id}/comments?page=3",
        "comments":[{
        	"author":{
                	"id":"8d919f29c12e8f97bcbbd34cc908f19ab9496989",
                	"host":"http://127.0.0.1:5454/",
                	"displayname":"Greg"
        	},
        	"comment":"Sick Olde English"
       		"pubDate":"Fri Jan  3 15:50:40 MST 2014",
                "guid":"5471fe89-7697-4625-a06e-b3ad18577b72"
        }]
}


# a reponse if friends or not
# ask a service http://service/friends/<authorid>
responds with:
{
	"query":"friends",
	# Array of Author UUIDs
	"authors":[
		"de305d54-75b4-431b-adb2-eb6b9e546013",
		"ae345d54-75b4-431b-adb2-fb6b9e547891"
	],
	# boolean true or false
	"friends": true
}

# ask a service if anyone in the list is a friend
# POST to http://service/friends/<authorid>
{
	"query":"friends",
	"author":"<authorid>",
	# Array of Author UUIDs
	"authors": [
	    "de305d54-75b4-431b-adb2-eb6b9e546013",
		"ae345d54-75b4-431b-adb2-fb6b9e547891",
		"...",
		"...",
		"..."
  	]
}

# reponds with
{
	"query":"friends",
 	"author":"9de17f29c12e8f97bcbbd34cc908f1baba40658e",
 	# Array of Author UUIDs who are friends
	"authors": [
	    "de305d54-75b4-431b-adb2-eb6b9e546013",
		"ae345d54-75b4-431b-adb2-fb6b9e547891",
		"..."
  	]
}

# this is needed for FOAF calls


# Here GREG tries to get a post from LARA that's marked as FOAF visibility
# the server will query greg's server to ensure that he is friends with 7de and 11c
# then it will get the users from its own server and see if they are friends of Lara
# Then it will go to at least 1 of these friend's servers and verify that they are friends of Greg
# once it is verified via the 3 hosts that Greg is a friend, then greg will get the data for lara's post

{
	"query":"getpost",
	"123e4567-a89b-12d3-a456-426655440000",
	"id":"9de17f29c12e8f97bcbbd34cc908f1baba40658e",
 	"author":{
 	    # UUID
		"id":"de305d54-75b4-431b-adb2-eb6b9e546013",
		"host":"http://127.0.0.1:5454/",
		"displayName":"Greg Johnson",
		# url to the authors information
		"url":"http://127.0.0.1:5454/author/9de17f29c12e8f97bcbbd34cc908f1baba40658e",
		# HATEOS
		"github": "http://github.com/gjohnson"
 	},
 	"friends":[
		"7deee0684811f22b384ccb5991b2ca7e78abacde",
		"11c3783f15f7ade03430303573098f0d4d20797b",
	]
}


# to make a friend request, POST to http://service/friendrequest

{
	"query":"friendrequest",
	"author": {
	    # UUID
		"id":"de305d54-75b4-431b-adb2-eb6b9e546013",
		"host":"http://127.0.0.1:5454/",
		"displayName":"Greg Johnson"
	},
	"friend": {
	    # UUID
		"id":"de305d54-75b4-431b-adb2-eb6b9e637281",
		"host":"http://127.0.0.1:5454/",
		"displayName":"Lara Croft",
		"url":"http://127.0.0.1:5454/author/9de17f29c12e8f97bcbbd34cc908f1baba40658e"
	}
}

# to unfriend simply do it locally

# Profile API calls
# GET http://service/author/9de17f29c12e8f97bcbbd34cc908f1baba40658e
# Enables viewing of foreign author's profiles
#
# Response
{
  "id":"9de17f29c12e8f97bcbbd34cc908f1baba40658e",
  "host":"http://127.0.0.1:5454/",
  "displayname":"Lara",
  "url":"http://127.0.0.1:5454/author/9de17f29c12e8f97bcbbd34cc908f1baba40658e",
  "friends": [
    {
      "id":"8d919f29c12e8f97bcbbd34cc908f19ab9496989",
      "host":"http://127.0.0.1:5454/",
      "displayname":"Greg",
      "url": "http://127.0.0.1:5454/author/8d919f29c12e8f97bcbbd34cc908f19ab9496989"
    }
  ],

  # Optional attributes
  "github_username": "lara",
  "first_name": "Lara",
  "last_name": "Smith",
  "email": "lara@lara.com",
  "bio": "Hi, I'm Lara"
}
